Unit Testing
Agile Development
Test-Driven Development
	Create or Change Code
	Create a Repeatable Test
	Review the Results

Unit Test
	The goal is 100% coverage
	Tests can be run from within Visual Studio for developer productivity
	Unit tests can be automated as part of a continuous integration process using a product like Jenkins, TeamCity, or Team Foundation Server

	
Create a Project in Visual Studio and name it 'Essential Training'

Create a test project in Visual Studio

Watch the unit testing portion of EssentialTraining Part2

Array
	A way to store more than one value in a variable at one time
	Have a fixed size, want to instantiate the size
	Ex:
		var groceryList = new string[4];

	More Array
		Can create an array all at once by doing
		var secondgroceryList = new string[4] { "Milk", "Eggs", "Cheese", "Apples"};

	Another way of creating an Array as an instance variable
		public string[] GroceryList;

Check file SimpleArray to see how a property of an array is created


Multi-Dimensional Arrays
	Arrays that contain Arrays
	var multi = new int[3, 4]
	{
		{0,1,2,3},
		{4,5,6,7},
		{8,9,10,11}
	};

	To call on a specific position you do what is similar with a single-dimensional array
		multi[2, 3]

		Keep in mind; this is calling upon technically speaking, the third row in the array. So the
		output would be 11

		
LINQ
	Set of extension classes that hook onto pretty much any kind of collection, and they allow us to do some really interesting things with our collections.
		
	What we can do is creaate a method that will extend an existing class without actually subclassing it, and without actually altering the code for the class itself.
	Powerful way of adding functions into an existing class, can do this on arrays, lists, and lots of different things.
		

Dictionaries
	A list that allowed you to use a key value pair situation so you could, instead of a number, assign some meaningful string

Collection Initializer
	Specify one or more elemt initializers when you initialize a collection type that implements IEnumerable

Flow Control
	File FlowControl shows different ways of writing the if statement

	If statement
	If- else statement

	Switch
		This works in exact fashion as the if else structure

	OR logical operator 
		||

	AND logical operator
		&&

	NOT logical operator
		!=

	For Loop
		for(var i = 0; i < 100; i++)

		First part is a variable that holds a counter
		Second part is the condition that we're looking to satisfy
			This will start counting at 0 and go up to 99
		Third part is where we do the incrementation
		
         ForEachLoop
		For each 'thing' in 'things' run the following code
		
	DoWhileLoop
	    Wil always execute its code block at least one time because the condition is executed after the code block
	    
	Continue and Break
	    Continue tells the code to skip everything else underneath (if there is a condition that is met) and go back around the loop                one more time
	    Continue is a great way to skip a portion of the loop without completely leaving it.
	    
	    Break on the other hand will not run anything underneath and break out of the loop completely
